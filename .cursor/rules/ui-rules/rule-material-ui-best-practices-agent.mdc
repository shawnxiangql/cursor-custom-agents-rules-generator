---
description: 当开发使用Material-UI的React TypeScript应用时应用此规则。适用于创建新组件、修改现有Material-UI组件或处理主题定制时。此规则提供了Material-UI的最佳实践，包括样式管理、组件使用模式、响应式设计和TypeScript类型集成等方面的指导。
globs: 
alwaysApply: false
---
# Material-UI 开发最佳实践

## Critical Rules

- 使用`sx`属性进行局部样式定制，避免内联样式和过多的CSS文件
- 所有组件必须有完整的TypeScript类型定义，包括props接口
- 自定义主题时统一使用`ThemeProvider`和主题变量，不直接硬编码颜色和尺寸
- 使用Material-UI的`useMediaQuery`钩子和断点系统实现响应式设计
- 使用`styled`API创建可复用的样式，避免样式重复
- 组件应遵循Material Design规范，保持视觉一致性
- 利用Material-UI的`Grid`和`Box`组件进行布局，避免自定义CSS布局
- 利用Material-UI的主题系统支持深色模式和浅色模式切换
- 表单必须使用Material-UI的`FormControl`系列组件，确保表单行为一致
- 数据展示应优先使用Material-UI的`Table`、`List`等组件
- 对话框、抽屉和菜单等临时UI元素应使用Material-UI的Portal机制
- 按钮和交互元素应提供适当的视觉反馈（悬停、聚焦、激活状态）
- 使用`@mui/material`导入组件，避免使用过时的`@material-ui/core`

## Examples

<example>
// 正确的样式处理方式
import { Box, Button, Typography } from '@mui/material';

const ItemCard = ({ item, onView }) => {
  return (
    <Box
      sx={{
        p: 2,
        borderRadius: 1,
        boxShadow: 1,
        '&:hover': {
          boxShadow: 3,
          transition: '0.3s'
        }
      }}
    >
      <Typography variant="h6">{item.name}</Typography>
      <Typography color="text.secondary" sx={{ mb: 2 }}>{item.location}</Typography>
      <Button variant="contained" onClick={() => onView(item.id)}>
        查看详情
      </Button>
    </Box>
  );
};
</example>

<example>
// 正确的响应式设计
import { Grid, Card, CardContent, useMediaQuery } from '@mui/material';
import { useTheme } from '@mui/material/styles';

const Dashboard = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  
  return (
    <Grid container spacing={isMobile ? 2 : 3}>
      <Grid item xs={12} md={6} lg={4}>
        <Card>
          <CardContent>物品统计信息</CardContent>
        </Card>
      </Grid>
      <Grid item xs={12} md={6} lg={4}>
        <Card>
          <CardContent>最近活动</CardContent>
        </Card>
      </Grid>
      <Grid item xs={12} lg={4}>
        <Card>
          <CardContent>家庭成员</CardContent>
        </Card>
      </Grid>
    </Grid>
  );
};
</example>

<example type="invalid">
// 不推荐的样式处理方式
import { Box } from '@mui/material';

const ItemCard = ({ item, onView }) => {
  // 避免内联样式
  return (
    <div style={{ padding: '16px', borderRadius: '4px', boxShadow: '0px 2px 4px rgba(0,0,0,0.1)' }}>
      <h2>{item.name}</h2>
      <p style={{ color: '#666', marginBottom: '16px' }}>{item.location}</p>
      <button 
        style={{ 
          backgroundColor: '#1976d2',
          color: 'white',
          padding: '8px 16px',
          border: 'none',
          borderRadius: '4px'
        }}
        onClick={() => onView(item.id)}
      >
        查看详情
      </button>
    </div>
  );
};
</example>

<example type="invalid">
// 不推荐的主题处理方式
import { ThemeProvider, createTheme } from '@mui/material/styles';

// 避免在组件内部创建新主题实例
const ItemList = () => {
  // 应该在应用顶层定义主题，而不是在组件内部
  const localTheme = createTheme({
    palette: {
      primary: {
        main: '#1976d2',
      },
    },
  });

  return (
    <ThemeProvider theme={localTheme}>
      {/* 组件内容 */}
    </ThemeProvider>
  );
};
</example>
